
struct job{
    int start;
    int end;
    int profit;
};

bool comp(job a, job b){
    return a.end <= b.end;
}

class Solution {
public:
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        vector<job> jobs;
        for(int i = 0; i < startTime.size(); i++){
            job temp;
            temp.start = startTime[i];
            temp.end = endTime[i];
            temp.profit = profit[i];
            jobs.push_back(temp);

        }      
        sort(jobs.begin(), jobs.end(), comp);
        int n = jobs.size();
        vector<int> T (n);
         T[0] = jobs[0].profit;
        for(int i=1; i < n; i++){
            T[i] = max(jobs[i].profit, T[i-1]);
            for(int j=i-1; j >=0; j--){
                if(jobs[j].end <= jobs[i].start){
                    T[i] = max(T[i], jobs[i].profit + T[j]);
                    break;
                }
            }
        }
        int maxVal = INT_MIN;
        for (int val : T) {
            if (maxVal < val) {
                maxVal = val;
            }
        }
        return maxVal;
    }
};
